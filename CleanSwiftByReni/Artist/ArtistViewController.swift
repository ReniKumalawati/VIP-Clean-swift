//
//  ArtistViewController.swift
//  CleanSwiftByReni
//
//  Created by Bootcamp on 13/05/19.
//  Copyright (c) 2019 Bootcamp. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreLocation
import RxSwift

protocol ArtistDisplayLogic: class
{
  func displaySomething(viewModel: Artist.Artist.ResponseArtist)
}

class ArtistViewController: UITableViewController, ArtistDisplayLogic, CLLocationManagerDelegate
{
    var interactor: ArtistBusinessLogic?
    var router: (NSObjectProtocol & ArtistRoutingLogic & ArtistDataPassing)?
    var data = Artist.Artist.ResponseDataArtist()
    var locationManager: CLLocationManager?
    var country: String = ""
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ArtistInteractor()
        let presenter = ArtistPresenter()
        let router = ArtistRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        determineUserCurrentLocation()
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
    }
    
    func doSomething()
    {
        let request = Artist.Artist.Request(method: "geo.gettopartists", country: country)
        interactor?.findTopArtists(request: request)
    }
    
    func displaySomething(viewModel: Artist.Artist.ResponseArtist)
    {
        data = viewModel.topartists
        tableView.reloadData()
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return data.artist.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath)
        cell.textLabel?.text = data.artist[indexPath.row].name
        return cell
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        router?.dataStore?.name = data.artist[indexPath.row].url
        router?.routeToDetail(segue: nil)
    }
    
    func determineUserCurrentLocation()  {
        locationManager = CLLocationManager()
        locationManager?.delegate = self
        locationManager?.desiredAccuracy = kCLLocationAccuracyBest
        locationManager?.requestAlwaysAuthorization()
        if CLLocationManager.locationServicesEnabled() {
            locationManager?.startUpdatingLocation()
        }
    }
    
    func fetchCityAndCountry(from location: CLLocation, completion: @escaping(_ city: String?, _ country: String?, _ error: Error?) -> ()) {
        CLGeocoder().reverseGeocodeLocation(location) {placemarks, error in
            completion(placemarks?.first?.locality, placemarks?.first?.country, error)
        }
    }
    
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        let userLocation:CLLocation = locations[0] as CLLocation
        fetchCityAndCountry(from: CLLocation(latitude: userLocation.coordinate.latitude, longitude: userLocation.coordinate.longitude)) { city, country, error in
            guard let city = city, let country = country, error == nil else {return}
            self.country = country
        }
    }
    
    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
        print("Error \(error)")
    }
}
